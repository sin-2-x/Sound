<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:system="clr-namespace:System;assembly=mscorlib"
                    xmlns:imaging="clr-namespace:System.Drawing.Imaging;assembly=System.Drawing"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                    
                    mc:Ignorable="d">
  
  <system:Double x:Key="ResourceSize">30</system:Double>
  <system:Double x:Key="ButtonHeight">32</system:Double>
  <system:Double x:Key="ButtonWidth">32</system:Double>
  <system:Double x:Key="ToggledComboBoxWidth">50</system:Double>
  <system:Double x:Key="ImageHeight">26</system:Double>
  <system:Double x:Key="ImageWidth">26</system:Double>
  <system:Double x:Key="InputHeight">22</system:Double>
  <system:Double x:Key="ComboBoxImageHeight">20</system:Double>
  <system:Double x:Key="ComboBoxImageWidth">20</system:Double>
  <system:Double x:Key="IntervalSetUpDownControlWidth">100</system:Double>
  <system:Double x:Key="IntervalSetUpDownControlHeight">28</system:Double>
  <system:Double x:Key="MinimumButtonColumnWidht">30</system:Double>
  <system:Double x:Key="MinimumBufferColumnWidht">60</system:Double>
  <system:Double x:Key="MinimumComboBoxColumnWidht">54</system:Double>
  <system:Double x:Key="MinimumTextColumnWidth">50</system:Double>
  <system:Double x:Key="StartButtonWidth">60</system:Double>
  <!--Margin-->
  <!--Margin steps-->
  <system:Double x:Key="MarginStep">4</system:Double>
  <system:Double x:Key="2XMarginStep">8</system:Double>
  <system:Double x:Key="3XMarginStep">12</system:Double>
  <system:Double x:Key="4XMarginStep">16</system:Double>
  <system:Double x:Key="HalfMarginStep">2</system:Double>
  <!--1X Margin-->
  <Thickness x:Key="LeftMargin"
             Left="{StaticResource MarginStep}" />
  <Thickness x:Key="RightMargin"
             Right="{StaticResource MarginStep}" />
  <Thickness x:Key="TopMargin"
             Top="{StaticResource MarginStep}" />
  <Thickness x:Key="BottomMargin"
             Bottom="{StaticResource MarginStep}" />
  <Thickness x:Key="TopBottomMargin"
             Top="{StaticResource MarginStep}"
             Bottom="{StaticResource MarginStep}" />
  <Thickness x:Key="RightBottomMargin"
             Right="{StaticResource MarginStep}"
             Bottom="{StaticResource MarginStep}" />
  <Thickness x:Key="TopLeftMargin"
             Left="{StaticResource MarginStep}"
             Top="{StaticResource MarginStep}" />
  <Thickness x:Key="LeftRightMargin"
             Left="{StaticResource MarginStep}"
             Right="{StaticResource MarginStep}" />
  <Thickness x:Key="LeftRightBottomMargin"
             Left="{StaticResource MarginStep}"
             Right="{StaticResource MarginStep}"
             Bottom="{StaticResource MarginStep}" />
  <Thickness x:Key="AllMargin"
             Left="{StaticResource MarginStep}"
             Right="{StaticResource MarginStep}"
             Top="{StaticResource MarginStep}"
             Bottom="{StaticResource MarginStep}" />
  <!--2X Margin-->
  <Thickness x:Key="2XRightMargin"
             Right="{StaticResource 2XMarginStep}" />
  <Thickness x:Key="2XLeftMargin"
             Left="{StaticResource 2XMarginStep}" />
  <Thickness x:Key="2XTopMargin"
             Top="{StaticResource 2XMarginStep}" />
  <Thickness x:Key="2XBottomMargin"
             Bottom="{StaticResource 2XMarginStep}" />
  <Thickness x:Key="2XAllMargin"
             Left="{StaticResource 2XMarginStep}"
             Right="{StaticResource 2XMarginStep}"
             Top="{StaticResource 2XMarginStep}"
             Bottom="{StaticResource 2XMarginStep}" />
  <!--3X Margin-->
  <Thickness x:Key="3XTopMargin"
             Top="{StaticResource 3XMarginStep}" />
  <Thickness x:Key="3XBottomMargin"
             Bottom="{StaticResource 3XMarginStep}" />
  <Thickness x:Key="3XTopLeftMargin"
             Top="{StaticResource 3XMarginStep}"
             Left="{StaticResource MarginStep}" />
  <Thickness x:Key="3XLeftMargin"
             Left="{StaticResource 3XMarginStep}" />
  <!--Half Margin-->
  <Thickness x:Key="HalfAllMargin"
             Left="{StaticResource HalfMarginStep}"
             Right="{StaticResource HalfMarginStep}"
             Top="{StaticResource HalfMarginStep}"
             Bottom="{StaticResource HalfMarginStep}" />
  <Thickness x:Key="HalfLeftMargin"
             Left="{StaticResource HalfMarginStep}" />
  <Thickness x:Key="HalfTopMargin"
             Top="{StaticResource HalfMarginStep}" />
  <Thickness x:Key="HalfRightMargin"
             Right="{StaticResource HalfMarginStep}" />
  <Thickness x:Key="HalfBottomtMargin"
             Bottom="{StaticResource HalfMarginStep}" />
  
  
  
  <!--ContextMenu--><!--
  <Style x:Key="MenuIconImageStyle"
         TargetType="{x:Type Image}">
    <Setter Property="Height"
            Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}, Path=Header.ActualHeight}" />
    <Setter Property="Width"
            Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type MenuItem}}, Path=Header.ActualHeight}" />
    <Style.Triggers>
      <Trigger Property="IsEnabled"
               Value="False">
        <Setter Property="Opacity"
                Value="0.5" />
      </Trigger>
    </Style.Triggers>
  </Style>
  
  <Image x:Key="IconImage"
         x:Shared="False"
         Source="{Binding Image, Converter={x:Static converters:ImageConverter.Instance}, ConverterParameter={x:Static imaging:ImageFormat.Png}}"
         Style="{StaticResource MenuIconImageStyle}"
         d:DataContext="{d:DesignInstance d:Type=commonViewModel:ActionCommand, d:IsDesignTimeCreatable=False}" />
  
  <Grid x:Key="IconTextBlock"
        x:Shared="False"
        d:DataContext="{d:DesignInstance d:Type=commonViewModel:ActionCommand, d:IsDesignTimeCreatable=False}">
    <TextBlock Text="{Binding PublicNameWithKeys}"
               VerticalAlignment="Center" />
  </Grid>
  <ControlTemplate x:Key="ContextMenuSeparatorTemplate">
    <Separator />
  </ControlTemplate>
  <Style x:Key="ContextMenuItemStyle"
         TargetType="{x:Type MenuItem}">
    <d:Style.DataContext>
      <x:Type Type="commonViewModel:ActionCommand" />
      <d:DesignInstance IsDesignTimeCreatable="Flase" />
    </d:Style.DataContext>
    --><!--TargetType="{x:Type MenuItem}"
	       d:DataContext="{d:DesignInstance d:Type=commonViewModel:ActionCommand, d:IsDesignTimeCreatable=False}">--><!--
    <Setter Property="Header"
            Value="{StaticResource IconTextBlock}" />
    <Setter Property="Command"
            Value="{Binding}" />
    <Setter Property="IsCheckable"
            Value="{Binding IsCheckable}" />
    <Setter Property="IsChecked"
            Value="{Binding IsChecked, Mode=TwoWay}" />
    <Setter Property="ItemsSource"
            Value="{Binding Children}" />
    <Setter Property="Icon"
            Value="{StaticResource IconImage}" />
    <Setter Property="Visibility"
            Value="{Binding IsVisible, Converter={x:Static converters:BoolToVisibilityConverter.Instance}}" />
    <Style.Triggers>
      <DataTrigger Binding="{Binding Image}"
                   Value="{x:Null}">
        <Setter Property="Icon"
                Value="{x:Null}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding }"
                   Value="{x:Null}">
        <Setter Property="Template"
                Value="{StaticResource ContextMenuSeparatorTemplate}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  --><!--Expander--><!--
  <Style TargetType="Expander"
         x:Key="ExpanderStyle">
    <Setter Property="BorderThickness"
            Value="1" />
    <Setter Property="BorderBrush"
            Value="Gray" />
    <Setter Property="IsExpanded"
            Value="True" />
    <Setter Property="Focusable"
            Value="False" />
    <Setter Property="Padding"
            Value="{StaticResource LeftRightBottomMargin}" />
    <Setter Property="HeaderTemplate">
      <Setter.Value>
        <DataTemplate>
          <TextBlock Text="{Binding}"
                     FontWeight="Bold" />
        </DataTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  --><!--Image--><!--
  <Style x:Key="ImageOnSquareButtonStyle"
         TargetType="{x:Type Image}">
    <Setter Property="HorizontalAlignment"
            Value="Stretch" />
    <Setter Property="VerticalAlignment"
            Value="Stretch" />
    <Setter Property="Margin"
            Value="{StaticResource AllMargin}" />
    <Style.Triggers>
      <Trigger Property="IsEnabled"
               Value="False">
        <Setter Property="Opacity"
                Value="0.5" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ToggleButtonStyle"
         TargetType="{x:Type ToggleButton}"
         BasedOn="{StaticResource {x:Type ToggleButton}}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}"
                   Value="true">
        <Setter Property="CommandParameter"
                Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ParameterChecked}" />
        <Setter Property="ToolTip"
                Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ToolTipChecked}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=Self}, Path=IsChecked}"
                   Value="false">
        <Setter Property="CommandParameter"
                Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ParameterUnchecked}" />
        <Setter Property="ToolTip"
                Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=ToolTipUnChecked}" />
      </DataTrigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="ImageInToggleButtonStyle"
         TargetType='{x:Type Image}'>
    <Style.Setters>
      <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=ImageWidth}" />
      <Setter Property="Height"
              Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=ImageHeight}" />
    </Style.Setters>
    <Style.Triggers>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=IsChecked}"
                   Value="true">
        <Setter Property="Source"
                Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=ImageChecked}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=IsChecked}"
                   Value="false">
        <Setter Property="Source"
                Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=ImageUnchecked}" />
      </DataTrigger>
      <Trigger Property="IsEnabled"
               Value="False">
        <Setter Property="Opacity"
                Value="0.5" />
      </Trigger>
    </Style.Triggers>
  </Style>
  <Style x:Key="SvgImageInToggleButtonStyle"
         TargetType='{x:Type controls:SvgImage}'>
    <Style.Setters>
      <Setter Property="Width"
              Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=ImageWidth}" />
      <Setter Property="Height"
              Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=ImageHeight}" />
    </Style.Setters>
    <Style.Triggers>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=IsChecked}"
                   Value="true">
        <Setter Property="Svg"
                Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=SvgChecked}" />
      </DataTrigger>
      <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=IsChecked}"
                   Value="false">
        <Setter Property="Svg"
                Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ToggleButton}}, Path=SvgUnchecked}" />
      </DataTrigger>
      <Trigger Property="IsEnabled"
               Value="False">
        <Setter Property="Opacity"
                Value="0.5" />
      </Trigger>
    </Style.Triggers>
  </Style>
  
  
  
  
  <Color x:Key="GradientColorFirst">#00A9DD</Color>
  <Color x:Key="GradientColorSecond">WhiteSmoke</Color>
  <DataTemplate x:Key="ParameterTemplate"
                DataType="processing:Parameter">
    <controls:ParameterEditor Text="{Binding Name}">
      <controls:ParameterEditor.ValueEditor>
        <TextBlock Text="{Binding Value}"></TextBlock>
      </controls:ParameterEditor.ValueEditor>
    </controls:ParameterEditor>
  </DataTemplate>
  <Style x:Key="ToolWindowStyle"
         TargetType="{x:Type Window}">
    <Setter Property="WindowStyle"
            Value="ToolWindow" />
    <Setter Property="Topmost"
            Value="False" />
    <Setter Property="ShowInTaskbar"
            Value="True" />
  </Style>-->

</ResourceDictionary>
